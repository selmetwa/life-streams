package web

import (
	"fmt"
  "strconv"
	stream_types "life-streams/internal/server/handlers/stream/types"
	create_stream_modal "life-streams/cmd/web/components/create_stream_modal"
	create_task_modal "life-streams/cmd/web/components/create_task_modal"
)

func SafeURL(url string) templ.SafeURL {
  return templ.SafeURL(url)
}

templ StreamsList(streams []stream_types.Stream) {
	<div class="streams">
		<style>
      .modals-wrapper {
        display: flex;
        flex-direction: row;
        gap: 1rem;
      }
      .empty {
        margin: 0;
        color: var(--text2);
        font-size: 1rem;
        font-weight: 500;
      }

      .streams {
        border: 1px solid red;
      }

      .streams-list {
        list-style-type: none;
        padding: 0;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 10px;
        flex-direction: column;
      }
      .stream-wrapper {
        padding: 1rem;
        background-color: var(--tile5);
        border: 1px solid var(--tile6);
        border-radius: 0.5rem;
        cursor: move;
        color: var(--text1);
      }

      .streams-list-title {
        color: var(--text1);
        font-size: 1.5rem;
        font-weight: 500;
        margin: 8px 0; 
      }
  </style>
		<div class="modals-wrapper">
			@create_stream_modal.CreateStreamModal()
			@create_task_modal.CreateTaskModal(streams, "")
		</div>
		<h2 class="streams-list-title">Streams</h2>
		<section>
			if len(streams) == 0 {
				<p class="empty">No streams found</p>
			} else {
				<ul class="streams-list">
					for _, stream := range streams {
						<li
							class="stream-wrapper"
							draggable="true"
						>
							<h3>{ stream.Title }</h3>
							<p>{ stream.Description }</p>
							<p>id: { fmt.Sprintf("%d", stream.ID) }</p>
							<p>Tasks: { fmt.Sprintf("%d", stream.TasksCount) }</p>
              <a href={templ.URL("/stream/" + strconv.Itoa(stream.ID))}>Details</a>
						</li>
					}
				</ul>
			}
		</section>
		<script>
    (() => {
      let selected = null

      const streamWrappers = document.querySelectorAll('.stream-wrapper')
      streamWrappers.forEach(wrapper => {
        wrapper.addEventListener('dragover', dragOver)
        wrapper.addEventListener('dragstart', dragStart)
        wrapper.addEventListener('dragend', dragEnd)
        wrapper.addEventListener('touchstart', touchStart)
        wrapper.addEventListener('touchmove', touchMove)
        wrapper.addEventListener('touchend', touchEnd)
      })
      function dragOver(e) {
        e.preventDefault();
        if (e.target.classList.contains('stream-wrapper') && e.target !== selected) {
          if (isBefore(selected, e.target)) {
            e.target.parentNode.insertBefore(selected, e.target);
          } else {
            e.target.parentNode.insertBefore(selected, e.target.nextSibling);
          }
        }
      }

      function dragEnd(e) {
        e.target.style.opacity = '1'

        selected = null
      }

      function dragStart(e) {
        console.log({ e })
        e.dataTransfer.effectAllowed = 'move'
        e.dataTransfer.setData('text/plain', null)
        selected = e.target
        selected.style.opacity = '0.4'
      }

      function touchStart(e) {
        selected = e.target.closest('.stream-wrapper');
      }

      function touchMove(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const target = document.elementFromPoint(touch.clientX, touch.clientY).closest('.stream-wrapper');
        if (target && target !== selected) {
          e.target.style.opacity = '0.4'
          if (isBefore(selected, target)) {
            target.parentNode.insertBefore(selected, target);
          } else {
            target.parentNode.insertBefore(selected, target.nextSibling);
          }
        }
      }

      function touchEnd(e) {
        e.target.style.opacity = '1'

        selected = null;
      }

      function isBefore(el1, el2) {
        let cur
        if (el2.parentNode === el1.parentNode) {
          for (cur = el1.previousSibling; cur; cur = cur.previousSibling) {
            if (cur === el2) return true
          }
        }
        return false;
      }
    })()
    </script>
	</div>
}
