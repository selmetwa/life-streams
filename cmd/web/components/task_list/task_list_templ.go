// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package web

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	task_types "life-streams/internal/server/handlers/tasks/types"
)

func TaskList(tasks []task_types.Task) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n      .tasks-list {\n        list-style-type: none;\n        padding: 0;\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n        gap: 10px;\n        flex-direction: column;\n      }\n      .task-wrapper {\n        padding: 1rem;\n        background-color: var(--tile5);\n        border: 1px solid var(--tile6);\n        border-radius: 0.5rem;\n        cursor: move;\n        color: var(--text1);\n      }\n  </style><section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(tasks) == 0 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p class=\"empty\">No tasks found</p>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<ul class=\"tasks-list\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, task := range tasks {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<li class=\"task-wrapper\" draggable=\"true\"><h3>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var2 string
				templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(task.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/components/task_list/task_list.templ`, Line: 37, Col: 23}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h3><p>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(task.Description)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/components/task_list/task_list.templ`, Line: 38, Col: 28}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p><p>id: ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", task.ID))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/components/task_list/task_list.templ`, Line: 39, Col: 42}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p></li>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</ul>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</section><script>\n    (() => {\n      let selected = null\n\n      const taskWrappers = document.querySelectorAll('.task-wrapper')\n      taskWrappers.forEach(wrapper => {\n        wrapper.addEventListener('dragover', dragOver)\n        wrapper.addEventListener('dragstart', dragStart)\n        wrapper.addEventListener('dragend', dragEnd)\n        wrapper.addEventListener('touchstart', touchStart)\n        wrapper.addEventListener('touchmove', touchMove)\n        wrapper.addEventListener('touchend', touchEnd)\n      })\n      function dragOver(e) {\n        e.preventDefault();\n        if (e.target.classList.contains('task-wrapper') && e.target !== selected) {\n          if (isBefore(selected, e.target)) {\n            e.target.parentNode.insertBefore(selected, e.target);\n          } else {\n            e.target.parentNode.insertBefore(selected, e.target.nextSibling);\n          }\n        }\n      }\n\n      function dragEnd(e) {\n        e.target.style.opacity = '1'\n\n        selected = null\n      }\n\n      function dragStart(e) {\n        e.dataTransfer.effectAllowed = 'move'\n        e.dataTransfer.setData('text/plain', null)\n        selected = e.target\n        selected.style.opacity = '0.4'\n      }\n\n      function touchStart(e) {\n        selected = e.target.closest('.task-wrapper');\n      }\n\n      function touchMove(e) {\n        e.preventDefault();\n        const touch = e.touches[0];\n        const target = document.elementFromPoint(touch.clientX, touch.clientY).closest('.task-wrapper');\n        if (target && target !== selected) {\n          e.target.style.opacity = '0.4'\n          if (isBefore(selected, target)) {\n            target.parentNode.insertBefore(selected, target);\n          } else {\n            target.parentNode.insertBefore(selected, target.nextSibling);\n          }\n        }\n      }\n\n      function touchEnd(e) {\n        e.target.style.opacity = '1'\n\n        selected = null;\n      }\n\n      function isBefore(el1, el2) {\n        let cur\n        if (el2.parentNode === el1.parentNode) {\n          for (cur = el1.previousSibling; cur; cur = cur.previousSibling) {\n            if (cur === el2) return true\n          }\n        }\n        return false;\n      }\n    })()\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
