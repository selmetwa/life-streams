package web

import (
	"life-streams/cmd/web"
	task_types "life-streams/internal/server/handlers/tasks/types"
	stream_types "life-streams/internal/server/handlers/stream/types"
	task_list "life-streams/cmd/web/components/task_list"
	create_task_modal "life-streams/cmd/web/components/create_task_modal"
)

templ StreamPage(
	isLoggedin bool,
	tasks []task_types.Task,
	title string,
	streamID string,
	streams []stream_types.Stream,
) {
  <!DOCTYPE html>

	<style>
    .stream-page-wrapper {
      padding: 2rem;
      position: relative;
    }

    .stream-header {
      margin-bottom: 1rem;

      > div {
        display: flex;
        flex-direction: row;
        gap: 1rem;
      }
    }

    .buttons-wrapper {
      > form {
        flex: 1;

        > button {
          width: 100%;
        }
      }
    }
  </style>
	@web.Base(isLoggedin) {
		<section class="stream-page-wrapper">
			<dialog class="delete-stream-dialog">
				<div id="delete-stream-response">
					<!-- Form response will be rendered here -->
				</div>
				<h2>Are you sure you want to delete this stream</h2>
				<div class="buttons-wrapper">
					<button class="close-delete-dialog">Close</button>
					<form hx-post="/delete_stream" hx-target="#delete-stream-response">
						<input type="hidden" name="streamID" value={ streamID }/>
						<button class="confirm-delete cancel" type="submit">Delete</button>
					</form>
				</div>
			</dialog>
			<header class="stream-header">
				<h2>{ title }</h2>
				<div class="buttons-wrapper">
					<button class="open-delete-modal cancel">Delete</button>
					@create_task_modal.CreateTaskModal(streams, streamID)
				</div>
			</header>
			@task_list.TaskList(tasks, streamID, streams)
		</section>
	}
	<script>
    (() => {
      const dialog = document.querySelector('.delete-stream-dialog');
      const button = document.querySelector('.open-delete-modal');
      const closeDeleteDialog = document.querySelector('.close-delete-dialog');


      closeDeleteDialog.addEventListener('click', () => {
        dialog.close();
      });
  
      button.addEventListener('click', () => {
        dialog.showModal();
      });

      dialog.addEventListener('close', () => {
        dialog.close();
      });
    })()
  </script>
}

templ DeleteStreamError() {
	<div class="error-wrapper">
		<h3>Deletion failed</h3>
		<p>Something went wrong</p>
	</div>
}

templ DeleteStreamSuccess() {
	<script>
    setTimeout(() => {
      window.location.href = '/dashboard'
    }, 3000)
  </script>
	<div class="success-wrapper">
		<h3>Stream deleted successfully</h3>
		<p>Redirecting to dashboard...</p>
	</div>
}
