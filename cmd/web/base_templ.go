// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package web

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Base(isLoggedIn bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n\n    :root {\n      --font-main: 'DM Sans', sans-serif;\n    }\n\n    body {\n      font-family: var(--font-main);\n      background-color: var(--tile2);\n    }\n\n    \n    .main {\n      outline: 1px solid var(--tile6);\n      width: min(100%, 1000px);\n      margin-inline: auto;\n      background-color: var(--tile3);\n      height: 100%;\n    }\n\n    .header {\n      margin-inline: auto;\n      border-bottom: 1px solid var(--tile6);\n      padding: 16px 0;\n\n      > nav {\n        display: flex;\n        width: 100%;\n        place-content: end;\n\n        > ul {\n          display: flex;\n          width: fit-content;\n          align-items: center;\n          list-style: none;\n          padding: 0;\n          margin: 0;\n\n          > li {\n            display: inline;\n            margin: 0 10px;\n          }\n        }\n      }\n    }\n\n  .content {\n    position: relative;\n  }\n  </style><!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta name=\"view-transition\" content=\"same-origin\"><title>Life streams</title><script src=\"/assets/js/htmx.min.js\"></script><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"><link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin><link href=\"https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&amp;display=swap\" rel=\"stylesheet\"><link rel=\"stylesheet\" href=\"/assets/css/reset.css\"></head><body><main class=\"main\"><header class=\"header\"><nav><ul><li class=\"theme-toggle-wrapper\"></li>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if isLoggedIn {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<li><a href=\"/dashboard\">dashboard</a></li><li><form action=\"/logout\" method=\"POST\"><button type=\"submit\">Logout</button></form></li>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<li><a href=\"/\">Home</a></li><li><a href=\"/login\">Login</a></li><li><a href=\"/signup\">sign up</a></li>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</ul></nav></header><div class=\"content\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></main><script>\n        const body = document.querySelector('body');\n        const colorSchemeFromLocalStorage = localStorage.getItem('color-scheme');\n        const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n        const colorScheme = colorSchemeFromLocalStorage || (prefersDarkMode ? 'dim' : 'light');\n\n        body.setAttribute('color-scheme', colorScheme);\n\n\n        function deleteButton() {\n          const button = document.querySelector('.theme-toggle-wrapper button');\n          button.remove();\n        }\n\n        function createButton(theme) {\n          const wrapper = document.querySelector('.theme-toggle-wrapper');\n          const button = document.createElement('button');\n          button.textContent = theme === 'light' ? 'Light Mode' : 'Dark Mode';\n          button.addEventListener('mousedown', () => {\n            body.setAttribute('color-scheme', theme);\n            localStorage.setItem('color-scheme', theme);\n            deleteButton();\n            createButton(theme === 'light' ? 'dim' : 'light');\n          });\n          wrapper.appendChild(button);\n        }\n\n        if (colorScheme === 'dim') {\n          createButton('light')\n        } else {\n          createButton('dim')\n        }\n      </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
